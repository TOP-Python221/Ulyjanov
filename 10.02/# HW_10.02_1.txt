Шаблоны проектирования: Прототип

  ==========  1  ==========

Вам даны классы Note, ScoreNote и MIDINote. В файле constants.py прописаны используемые в перечислителях константы.


    class Note:
        """Музыкальная нота с возможностью копирования."""
        def __init__(self, 
                     *,
                     pitch: Pitch, 
                     octave: Octave, 
                     accidental: Accidental = None, 
                     duration: Duration = Duration.QUARTER):
            self.pitch = pitch
            self.octave = octave
            self.accidental = accidental
            self.duration = duration

        def clone(self, ...):
            """Создаёт новый экземпляр ноты с теми же параметрами."""


    class ScoreNote(Note):
        """Изображение музыкальной ноты в партитуре."""
        # self.stem_up: bool
        # self.beam: bool = False


    class MIDINote(Note):
        """Кодирование музыкальной ноты в MIDI протоколе."""
        # self.velocity: int


Допишите конструкторы классов ScoreNote и MIDINote исходя из требований о наличии дополнительных атрибутов у соответствующих классов.
Требования подписаны в виде комментариев под сигнатурами классов.


Допишите метод clone() в родительском классе.
В методе необходимо учесть наследование. То есть, метод должен клонировать не только экземпляр класса Note, но и экземпляры дочерних классов, создавая новые экземпляры тех же классов.

Также, необходимо добавить возможность переопределять значения некоторых атрибутов при клонировании.
Например:

    midi_c3 = MIDINote(pitch=Pitch.C, octave=Octave.L1, velocity=80)
    midi_d3 = midi_c3.clone(pitch=Pitch.D)



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.
Работа с атрибутами

  ==========  1  ==========

Реализовать класс для удобной работы с матрицами.

Напишите метод __init__ для инициализации матрицы элементами. Чтобы не усложнять код давайте пока считать, что элементами матрицы могут быть только целые числа.

Напишите метод __str__ для форматированного вывода элементов матрицы.

Придумайте несколько способов хранения элементов матрицы в атрибутах. Думайте обо всех видах атрибутов: обычные, скрытые, защищённые, свойства. Думайте, имеет ли смысл использовать те или иные атрибуты в той или иной структуре данных.

Класс должен поддерживать операции:
  - поэлементного сложения
  - поэлементного вычитания 
Напишите для этого методы __add__ и __sub__.

Реализуйте КАЖДЫЙ из придуманных способов хранения, отмечая как меняется код каждого метода, включая конструктор, в зависимости от используемой структуры хранения данных. То есть у вас должно получиться несколько разных классов.

Поместите их в один файл, сделайте между ними отступ, не забудьте описать в строке документации каждый класс и обязательно проверьте работоспособность каждого класса.

Пример:

    class Matrix:
        ...

    m1 = Matrix(...)
    m2 = Matrix(...)

    m3 = m1 + m2
    
    print(m3)
    
    # stdout:
    #  2  3 10
    # 21 -5  7
    #  1  8 -4
    # -3 47  5



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.